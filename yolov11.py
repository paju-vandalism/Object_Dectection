# -*- coding: utf-8 -*-
"""YOLOv11

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1547B5oZc0ohCPsqLBVQRbEx6U2qhGRex

**라이브러리 로드**
"""

import torch
print("torch.cuda.is_available() =", torch.cuda.is_available())
print("torch.cuda.device_count() =", torch.cuda.device_count())
print("torch.version.cuda =", torch.version.cuda)

from google.colab import drive
drive.mount('/content/drive')
path = '/content/drive/MyDrive/Colab Notebooks/MiniProject/'

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

"""**라이브러리 설치**"""

!pip install ultralytics -q

import ultralytics
print(ultralytics.__version__)



"""**YOLO Fine-tuning**"""

import torch
from ultralytics import YOLO

torch.cuda.empty_cache()

model = YOLO("yolo11n.pt")   # n, s, m, l, x 중 하나 선택 가능

model.train(
    data=path + "dataset/YOLOv11.yaml",
    epochs=150,             # 조금 더 학습
    imgsz=800,              # 입력 이미지 크기 ↑
    batch=4,               # 배치 크기 ↑
    lr0=0.0001,              # 학습률 ↓
    momentum=0.95,          # 모멘텀 ↑
    weight_decay=0.0003,    # 가중치 감쇠 ↓
    hsv_s=0.8,              # 색상 채도 증강 ↑
    hsv_v=0.5,              # 밝기 증강 ↑
    fliplr=0.5,             # 좌우 반전 확률
    translate=0.1,          # 평행 이동
    mosaic=0.7,             # 모자이크 증강 (중간 정도)
    cos_lr=True,            # Cosine 스케줄링 활성화
    cls=2,                  # 🔥 불균형 보정
    # resume=True,          # 🔥 기존 학습 이어서 진행
    dropout=0.05,           # Dropout 적용
    device=0,               # GPU(0) 사용 (CPU는 "cpu")
    name="yolo_model"       # 새로운 학습 세션 이름
)



"""**모델 학습 곡선 그리기**"""

import pandas as pd
import matplotlib.pyplot as plt

# YOLO 학습 로그 파일 경로
log_path = "runs/detect/yolo_model/results.csv"

# CSV 파일 읽기
df = pd.read_csv(log_path)

# 데이터 확인
print(df.columns)
print(df.head())

# 1️⃣ 손실 (Loss) 시각화
plt.figure(figsize=(10,5))
plt.plot(df['epoch'], df['train/box_loss'], label='Box Loss')
plt.plot(df['epoch'], df['train/cls_loss'], label='Cls Loss')
plt.plot(df['epoch'], df['train/dfl_loss'], label='DFL Loss')
plt.title('YOLO Training Loss Curve')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid()
plt.show()

# 2️⃣ 성능 지표 (mAP, Precision, Recall) 시각화
plt.figure(figsize=(10,5))
plt.plot(df['epoch'], df['metrics/mAP50(B)'], label='mAP50')
plt.plot(df['epoch'], df['metrics/mAP50-95(B)'], label='mAP50-95')
plt.plot(df['epoch'], df['metrics/precision(B)'], label='Precision')
plt.plot(df['epoch'], df['metrics/recall(B)'], label='Recall')
plt.title('YOLO Validation Metrics Curve')
plt.xlabel('Epoch')
plt.ylabel('Score')
plt.legend()
plt.grid()
plt.show()



"""**Test 이미지 적용**"""

from ultralytics import YOLO
from IPython.display import Image

# 학습된 YOLOv11 모델 불러오기
model = YOLO("runs/detect/yolo_model/weights/best.pt")

# 분석할 이미지 지정
image_path = "test.jpg"

# 이미지에 대해 객체 탐지 수행 (GPU 사용)
results = model.predict(
    source=image_path,       # 입력 이미지 경로
    device=0,                # GPU 사용 (CPU는 "cpu")
    conf=0.25,               # 최소 신뢰도 임계값
    save=True,               # 결과 이미지 저장
    show=True,               # Colab 내부 표시
    project="runs/detect",   # 저장 경로 기본 폴더
    name="predict32",         # 결과 폴더 이름
    line_thickness=2,        # 박스 두께
    show_labels=True,        # 클래스명 표시
    show_conf=True           # 신뢰도 표시
)

# 탐지된 객체 결과 출력
for box in results[0].boxes:
    cls_id = int(box.cls[0])        # 클래스 ID (숫자)
    cls_name = model.names[cls_id]  # 클래스 이름 (문자열)
    conf = float(box.conf[0])       # 신뢰도 (0~1)
    print(f"Detected: {cls_name} ({conf:.2f})")

# 모델을 ONNX로 내보내기
onnx_path = model.export(format="onnx")
print(f"✅ Model exported to: {onnx_path}")

# 결과 이미지 표시
Image(filename="runs/detect/predict32/test.jpg")







"""**DETR Fine-Tunning**"""

from ultralytics import RTDETR
import torch

torch.cuda.empty_cache()

model = RTDETR("rtdetr-l.pt")  # n, s, m, l 중 선택

model.train(
    data=path + "dataset/YOLOv11.yaml",
    epochs=200,               # 학습 길게 (150→200)
    imgsz=960,                # 해상도 ↑ (정밀도 향상)
    batch=8,
    lr0=0.002,                # 학습률 유지 (RT-DETR 권장)
    momentum=0.937,           # 일반적인 최적값 (AdamW 안정화)
    weight_decay=0.0005,      # 약간 ↑ 해서 과적합 방지
    warmup_epochs=3.0,        # 초반 학습 안정화
    cos_lr=True,              # Cosine LR scheduler 유지
    amp=True,                 # 자동 혼합정밀도 (속도↑, 메모리↓)

    # 🧩 데이터 불균형 & 증강
    mixup=0.1,                # MixUp 살짝 추가 (과적합 방지)
    mosaic=0.3,               # RT-DETR에는 과도한 mosaic 피해야 함
    fliplr=0.5,               # 좌우 반전
    hsv_s=0.7,                # 채도 증강
    hsv_v=0.4,                # 밝기 증강
    translate=0.05,           # 위치 이동 살짝만
    scale=0.9,                # 크기 증강 (0.9~1.1 사이)

    # 🧠 불균형 보정
    cls=1.5,                  # 클래스 손실 가중치 ↑
    box=0.05,                 # box 손실 가중치 (기본값 유지)

    # 💾 기타
    dropout=0.05,             # dropout 유지
    device=0,                 # GPU 사용
    patience=30,              # 조기종료 설정 (성능 정체시)
    name="rtdetr_model"
)









